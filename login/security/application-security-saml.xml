<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:security="http://www.springframework.org/schema/security"
       xmlns:context="http://www.springframework.org/schema/context"
       xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-4.2.xsd
		http://www.springframework.org/schema/security http://www.springframework.org/schema/security/spring-security-4.2.xsd
		http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd">

    <!-- Enable anootation scan in the saml extension -->
    <context:annotation-config />
    <context:component-scan base-package="org.springframework.security.saml"/>

    <!-- Define the Authentication Provider used by WebSecurityConfig -->
    <security:authentication-manager id="authenticationManager">
        <security:authentication-provider ref="samlAuthenticationProvider"/>
    </security:authentication-manager>

    <!-- Define a UserDetailsService that will get the user's information from SAML IDP and create a session -->
    <bean id="samlUserDetailsService" class="com.castsoftware.aip.console.security.saml.SamlUserDetailsServiceImpl">
    </bean>

    <!-- Required by SAML HTTP Bindings -->
    <bean id="velocityEngine" class="org.springframework.security.saml.util.VelocityFactory"
          factory-method="getEngine"/>

    <!-- Required by most SAML processors to parse responses -->
    <bean id="parserPool" class="org.opensaml.xml.parse.StaticBasicParserPool" init-method="initialize">
    </bean>

    <!-- Hold instances of parser pools -->
    <bean id="parserPoolHolder" name="parserPoolHolder"
          class="org.springframework.security.saml.parser.ParserPoolHolder"/>

    <!-- Defines an HTTPClient bean to be used by the HttpMetadata Provider (if needed) -->
    <bean id="httpClient" class="org.apache.commons.httpclient.HttpClient">
        <constructor-arg>
            <bean class="org.apache.commons.httpclient.MultiThreadedHttpConnectionManager"/>
        </constructor-arg>
    </bean>

    <!-- Define the SAML Authentication Provider -->
    <bean id="samlAuthenticationProvider" class="org.springframework.security.saml.SAMLAuthenticationProvider">
        <property name="userDetails" ref="samlUserDetailsService"/>
        <property name="forcePrincipalAsString" value="false"/>
        <property name="consumer" ref="webSSOProfilerConsumer"/>
        <property name="hokConsumer" ref="webSSOProfileConsumerHoK"/>
    </bean>

    <bean id="contextProvider" class="org.springframework.security.saml.context.SAMLContextProviderImpl"/>

    <bean id="samlBootstrap" class="com.castsoftware.aip.console.security.saml.SamlBootstrap"/>

    <bean id="samlLogger" class="org.springframework.security.saml.log.SAMLDefaultLogger">
        <property name="logMessages" value="true"/>
    </bean>

    <bean id="webSSOProfilerConsumer" class="org.springframework.security.saml.websso.WebSSOProfileConsumerImpl"/>
    <bean id="webSSOProfileConsumerHoK" class="org.springframework.security.saml.websso.WebSSOProfileConsumerHoKImpl"/>
    <!-- SAMLEntryPoint defines qualifier's for the next 3 beans (that's why they're not perfectly camel cased) -->
    <bean id="webSSOprofile" class="org.springframework.security.saml.websso.WebSSOProfileImpl"/>
    <bean id="hokWebSSOProfile" class="org.springframework.security.saml.websso.WebSSOProfileHoKImpl"/>
    <bean id="ecpprofile" class="org.springframework.security.saml.websso.WebSSOProfileECPImpl"/>

    <bean id="logoutProfile" class="org.springframework.security.saml.websso.SingleLogoutProfileImpl">

    </bean>

    <!-- Constructor argument details :
     * Path to key store (classpath:/mykeystore.jks or file:C:/tmp/mykeystore.jks)
     * Keystore password
     * Map containing entries with key=alias and value=alias' password
     * Default alias
    -->
    <bean id="keyManager" class="org.springframework.security.saml.key.JKSKeyManager">
        <constructor-arg value="file:${security.config.folder}/${security.saml.keystore.filename}"/>
        <constructor-arg type="java.lang.String" value="${security.saml.keystore.password}"/>
        <constructor-arg>
            <map>
                <entry key="${security.saml.keystore.default-alias}" value="${security.saml.keystore.password}"/>
            </map>
        </constructor-arg>
        <constructor-arg type="java.lang.String" value="${security.saml.keystore.default-alias}"/>
    </bean>

    <!-- tlsProtocolConfigurer used for HttpMetadata retrieval over HTTPS connections -->
    <bean id="tlsProtocolConfigurer" class="org.springframework.security.saml.trust.httpclient.TLSProtocolConfigurer">

    </bean>

    <!-- HTTPS validation using the previously defined keyManager -->
    <bean id="socketFactory" class="org.springframework.security.saml.trust.httpclient.TLSProtocolSocketFactory">
        <constructor-arg ref="keyManager"/>
        <constructor-arg value="null"/>
        <constructor-arg type="java.lang.String" value="defaultAndLocalhost"/>
    </bean>

    <bean id="socketFactoryProtocol" class="org.apache.commons.httpclient.protocol.Protocol">
        <constructor-arg type="java.lang.String" value="https"/>
        <constructor-arg ref="socketFactory"/>
        <constructor-arg type="int" value="443"/>
    </bean>

    <bean id="socketFactoryInitialization" class="org.springframework.beans.factory.config.MethodInvokingFactoryBean">
        <property name="targetClass" value="org.apache.commons.httpclient.protocol.Protocol"/>
        <property name="targetMethod" value="registerProtocol"/>
        <property name="arguments">
            <array value-type="java.lang.Object">
                <value type="java.lang.String">https</value>
                <ref bean="socketFactoryProtocol"/>
            </array>
        </property>
    </bean>

    <!-- Define the SAML entry point to start the SSO process -->
    <bean id="samlEntryPoint" class="org.springframework.security.saml.SAMLEntryPoint">
        <property name="defaultProfileOptions">
            <bean class="org.springframework.security.saml.websso.WebSSOProfileOptions">
                <property name="includeScoping" value="false"/>
            </bean>
        </property>
    </bean>

    <!-- Define extended metadata based on what the IDP metadata will be -->
    <bean id="extendedMetadata" class="org.springframework.security.saml.metadata.ExtendedMetadata">
        <property name="idpDiscoveryEnabled" value="true"/>
        <property name="signMetadata" value="false"/>
        <property name="ecpEnabled" value="true"/>
        <property name="sslHostnameVerification" value="defaultAndLocalhost"/>
    </bean>

    <!-- The IDP discovery service -->
    <bean id="samlIDPDiscovery" class="org.springframework.security.saml.SAMLDiscovery">
        <property name="idpSelectionPath" value="/saml/idpSelection"/>
    </bean>

    <bean id="extendedMetadataProvider"
          class="org.springframework.security.saml.metadata.ExtendedMetadataDelegate">
        <!-- This is defined in the SamlConfig file -->
        <constructor-arg ref="metadataProvider"/>
        <constructor-arg ref="extendedMetadata"/>
        <property name="metadataTrustCheck" value="false"/>
        <property name="metadataRequireSignature" value="true"/>
    </bean>

    <!--
        Custom Metadata Provider - Takes in a metadata source and creates a Provider based on the type of the source
        The other parameters are only to create the appropriate MetadataProvider based on the source
        Default returns a FileSystemMetadataProvider (using an absolute path to a file)
        Source starting with "classpath:" will return a ResourceMetadataProvider
         Source starting with "http(s)": will return an HttpMetadataProvider
    -->
    <bean id="metadataProvider" class="com.castsoftware.aip.console.security.saml.SamlMetadataProvider"
          factory-method="getMetadataProvider">
        <constructor-arg name="metadataSource" value="${security.saml.metadata.source}"/>
        <constructor-arg ref="parserPool"/>
        <constructor-arg ref="httpClient"/>
    </bean>

    <bean id="metadata" class="org.springframework.security.saml.metadata.CachingMetadataManager">
        <constructor-arg>
            <list>
                <ref bean="extendedMetadataProvider"/>
            </list>
        </constructor-arg>
    </bean>

    <!-- Define basic information regarding WEBI as a Service Provider -->
    <bean id="metadataGenerator" class="org.springframework.security.saml.metadata.MetadataGenerator">
        <property name="entityId" value="http://localhost:8080/saml/metadata"/>
        <property name="extendedMetadata" ref="extendedMetadata"/>
        <property name="includeDiscoveryExtension" value="false"/>
        <property name="keyManager" ref="keyManager"/>
    </bean>

    <bean id="metadataDisplayFilter" class="org.springframework.security.saml.metadata.MetadataDisplayFilter">

    </bean>

    <bean id="successRedirectHandler"
          class="com.castsoftware.aip.console.security.saml.SamlAuthenticationSuccessHandler">
        <property name="defaultTargetUrl"
                  value="http://localhost/"/>
    </bean>

    <bean id="authenticationFailureHandler"
          class="org.springframework.security.web.authentication.SimpleUrlAuthenticationFailureHandler">
        <property name="useForward" value="false"/>
        <property name="defaultFailureUrl" value="/error"/>
    </bean>

    <bean id="samlWebSSOHoKProcessingFilter" class="org.springframework.security.saml.SAMLWebSSOHoKProcessingFilter">
        <property name="authenticationSuccessHandler" ref="successRedirectHandler"/>
        <property name="authenticationFailureHandler" ref="authenticationFailureHandler"/>
        <property name="authenticationManager" ref="authenticationManager"/>
    </bean>

    <bean id="samlWebSSOProcessingFilter" class="org.springframework.security.saml.SAMLProcessingFilter">
        <property name="authenticationManager" ref="authenticationManager"/>
        <property name="authenticationSuccessHandler" ref="successRedirectHandler"/>
        <property name="authenticationFailureHandler" ref="authenticationFailureHandler"/>
    </bean>

    <bean id="metadataGeneratorFilter" class="org.springframework.security.saml.metadata.MetadataGeneratorFilter">
        <constructor-arg ref="metadataGenerator"/>
    </bean>

    <bean id="successLogoutHandler"
          class="org.springframework.security.web.authentication.logout.SimpleUrlLogoutSuccessHandler">
        <property name="defaultTargetUrl" value="/"/>
    </bean>

    <bean id="logoutHandler"
          class="org.springframework.security.web.authentication.logout.SecurityContextLogoutHandler">
        <property name="invalidateHttpSession" value="true"/>
        <property name="clearAuthentication" value="true"/>
    </bean>

    <bean id="samlLogoutProcessingFilter" class="org.springframework.security.saml.SAMLLogoutProcessingFilter">
        <constructor-arg ref="successLogoutHandler"/>
        <constructor-arg ref="logoutHandler"/>
    </bean>

    <bean id="samlLogoutFilter" class="org.springframework.security.saml.SAMLLogoutFilter">
        <constructor-arg ref="successLogoutHandler"/>
        <constructor-arg>
            <array value-type="org.springframework.security.web.authentication.logout.LogoutHandler">
                <ref bean="logoutHandler"/>
            </array>
        </constructor-arg>
        <constructor-arg>
            <array value-type="org.springframework.security.web.authentication.logout.LogoutHandler">
                <ref bean="logoutHandler"/>
            </array>
        </constructor-arg>
    </bean>

    <bean id="artifactResolutionProfile" class="org.springframework.security.saml.websso.ArtifactResolutionProfileImpl">
        <constructor-arg ref="httpClient"/>
        <property name="processor">
            <bean class="org.springframework.security.saml.processor.SAMLProcessorImpl">
                <constructor-arg>
                    <bean class="org.springframework.security.saml.processor.HTTPSOAP11Binding">
                        <constructor-arg ref="parserPool"/>
                    </bean>
                </constructor-arg>
            </bean>
        </property>
    </bean>

    <bean id="artifactBinding" class="org.springframework.security.saml.processor.HTTPArtifactBinding">
        <constructor-arg ref="parserPool"/>
        <constructor-arg ref="velocityEngine"/>
        <constructor-arg ref="artifactResolutionProfile"/>
    </bean>

    <bean id="postBinding" class="org.springframework.security.saml.processor.HTTPPostBinding">
        <constructor-arg ref="parserPool"/>
        <constructor-arg ref="velocityEngine"/>
    </bean>

    <bean id="redirectDeflateBinding" class="org.springframework.security.saml.processor.HTTPRedirectDeflateBinding">
        <constructor-arg ref="parserPool"/>
    </bean>

    <!-- HTTP Soap 1.1 bindings -->
    <bean id="httpSoap11Binding" class="org.springframework.security.saml.processor.HTTPSOAP11Binding">
        <constructor-arg ref="parserPool"/>
    </bean>

    <!-- HTTP Soap 1.1 reverse bindings -->
    <bean id="httpPaos11Binding" class="org.springframework.security.saml.processor.HTTPPAOS11Binding">
        <constructor-arg ref="parserPool"/>
    </bean>

    <bean id="processor" class="org.springframework.security.saml.processor.SAMLProcessorImpl">
        <constructor-arg>
            <list>
                <ref bean="redirectDeflateBinding"/>
                <ref bean="postBinding"/>
                <ref bean="artifactBinding"/>
                <ref bean="httpSoap11Binding"/>
                <ref bean="httpPaos11Binding"/>
            </list>
        </constructor-arg>
    </bean>

    <!-- Filters for processing of SAML endpoints -->
    <bean id="samlFilter" class="org.springframework.security.web.FilterChainProxy">
        <security:filter-chain-map request-matcher="ant">
            <security:filter-chain pattern="/saml/login/**" filters="samlEntryPoint"/>
            <security:filter-chain pattern="/saml/logout/**" filters="samlLogoutFilter"/>
            <security:filter-chain pattern="/saml/metadata/**" filters="metadataDisplayFilter"/>
            <security:filter-chain pattern="/saml/SSO/**" filters="samlWebSSOProcessingFilter"/>
            <security:filter-chain pattern="/saml/SSOHoK/**" filters="samlWebSSOHoKProcessingFilter"/>
            <security:filter-chain pattern="/saml/SingleLogout/**" filters="samlLogoutProcessingFilter"/>
            <security:filter-chain pattern="/saml/discovery/**" filters="samlIDPDiscovery"/>
        </security:filter-chain-map>
    </bean>

</beans>
